[project]
name = "mp-image-tool-esp32"
description = "Tool for manipulating micropython ESP32 firmware files"
readme = "README.md"
authors = [{name = "glenn20", email = "6965319+glenn20@users.noreply.github.com"}]
urls = {Homepage = "https://github.com/glenn20/mp-image-tool-esp32"}
license = {text = "MIT"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Embedded Systems",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]
requires-python = ">=3.9"
dynamic = ["version"]
dependencies = [
    "esptool>=4.6.2",
    "rich>=10.12.0",
    "more-itertools>=8.8.0",
    "typing-extensions>=4.12",
]
optional-dependencies.littlefs = [
    "littlefs-python>=0.12.0",
]

[project.scripts]  # The entry points for the command line tools
mp-image-tool-esp32 = "mp_image_tool_esp32.main:main"

[dependency-groups]
typing = [
    "mypy>=0.910", "types-requests>=2.32", "types-pyserial>=3.5", "types-pyyaml>=6.0"
]
test = [
    {include-group = "typing"},
    "ruff>=0.6.7", "pytest>=8.3.2", "pytest-cov>=3.0.0", "pytest-sugar>=1.0.0",
    "requests>=2.32.3", "pyyaml>=6.0.2", "tox>=4.22.0", "tox-uv>=1.13",
]
dev = [
    {include-group = "test"},
    "pre-commit>=2.9", "pre-commit-uv>=4.0.0", "pip>=23.0",  # pre-commit hooks
    "hatch>=1.12.0", "hatch-vcs>=0.3.0", # For building and updating _version.py
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# Build python packages and update version number
[tool.hatch]
build.hooks.vcs.version-file = "src/mp_image_tool_esp32/_version.py"
version.source = "vcs"  # Get the version from git, eg: 0.0.6.dev0+g1234567
# Drop the local version part (eg: +g1234567) or pypi will reject package
version.raw-options.local_scheme = "no-local-version"
# A manually triggered github release workflow may generate a new tag
# with .devN suffix. We need to tell setuptools_scm to ignore past tags with
# this suffix when calculating the version number else it refuses to
# bump the version number.
version.raw-options.git_describe_command = [
    "git", "describe", "--dirty", "--tags", "--long",
    "--match", "v*.[0-9]",
    "--match", "v*.[0-9][0-9]",
    "--match", "v*.[0-9][0-9][0-9]",
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.9"
mypy_path = "typings"
disallow_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true

[tool.ruff]
exclude = ["_version.py", "tests/data"]
lint.extend-select = ["I"]  # Enable ruffs isort rules (for compat with vscode ruff)

[tool.coverage]
run.source = ["src", "tests"]
run.omit = ["_version.py"]
report.skip_covered = false
append = true

# https://tox.wiki/en/latest/config.html#pyproject-toml-native
[tool.tox]
env_list = [
    "clean", "typing", "lint", "format",
    "3.9", "3.10", "3.11", "3.12", "3.13"
]
labels.static = ["clean", "typing", "lint", "format"]
env.clean.commands = [["coverage", "erase"]]  # Cleanup coverage data
env.clean.skip_install = true
env.typing.commands = [["mypy"]]
env.lint.commands = [["ruff", "check"]]
env.format.commands = [["ruff", "format", "--check"]]

# Default command and options for all the environments
env_run_base.commands = [["pytest", {replace = "posargs", extend = true}]]
env_run_base.dependency_groups = ["test"]  # Ensure test dependencies are installed
env_run_base.extras = ["littlefs"]  # Include optional dependencies
env_run_base.package = "editable"  # Use the editable install mode
env_run_base.runner = "uv-venv-runner"  # We love uv
env_run_base.skip_install = true

# Overrides for the latest python version
env.3.13.commands = [["pytest", "--cov", {replace = "posargs", extend = true}]]
env.3.13.labels = ["cov", "coverage", "latest"]
