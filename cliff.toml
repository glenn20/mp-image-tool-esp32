# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "glenn20"
repo = "mp-image-tool-esp32"


[changelog]
# Tera templates to be rendered for the changelog.
# See https://keats.github.io/tera/docs/#introduction
header = """
# Changelog
"""
body = """

{% macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

## What's Changed {% if version %} in [{{ version }}] {%- else %} ([unreleased]) {%- endif %}
{% for commit in commits %}
  {%- if commit.remote.pr_title -%}
    {%- set commit_message = commit.remote.pr_title -%}
  {%- else -%}
    {%- set commit_message = commit.raw_message -%}
  {%- endif %}
  - {{ commit_message | split(pat="\n") | first | trim }}\
    - ([{{ commit.id | truncate(length=7, end='') }}])
    {%- if commit.remote.pr_number %} - @{{ commit.remote.username }} in [#{{ commit.remote.pr_number }}] {%- endif -%}
    {%- for footer in commit.footers | default(value=[]) -%}
      {%- if footer.token is matching('^[Cc]lose[sd]?$') %} - Closes [{{ footer.value }}] {%- endif -%}
    {%- endfor -%}
{% endfor %}

{# Footnote link to the versioned changelog -#}
{% if version -%}
    {% if previous.version -%}
        [{{ version }}]: \
            {{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}
    {% else -%}
        [{{ version }}]: {{ self::remote_url() }}/tree/{{ version }}
    {% endif -%}
{% else -%}
    [unreleased]: {{ self::remote_url() }}/compare/{{ previous.version }}..HEAD
{% endif -%}

{# Footnote links to commits, PRs and issues referenced in the changelog -#}
{% for commit in commits -%}
  {% if commit.id -%}
    [{{ commit.id | truncate(length=7, end='') }}]: {{ self::remote_url() }}/commit/{{ commit.id }}
  {% endif -%}
  {% if commit.remote.pr_number -%}
    [#{{ commit.remote.pr_number }}]: {{ self::remote_url() }}/pull/{{ commit.remote.pr_number }}
  {% endif -%}
  {% for footer in commit.footers | default(value=[]) -%}
    {% if footer.token is matching('^[Cc]lose[sd]?$') -%}
      [{{ footer.value }}]: {{ self::remote_url() }}/issues/{{ footer.value | replace(from='#', to='') }}
    {% endif -%}
  {% endfor -%}
{% endfor -%}

"""
footer = """

<!-- generated by git-cliff -->
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true
# Render body even when there are no releases to process.
render_always = true
# An array of regex based postprocessors to modify the changelog.
postprocessors = [
    # Replace the placeholder <REPO> with a URL.
    #{ pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" },
]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = false
# Require all commits to be conventional.
# Takes precedence over filter_unconventional.
require_conventional = false
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# An array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = [
    # Replace issue numbers with link templates to be updated in `changelog.postprocessors`.
    #{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
    # Check spelling of the commit message using https://github.com/crate-ci/typos.
    # If the spelling is incorrect, it will be fixed automatically.
    #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = false
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->üöÄ Features" },
    { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },
    { message = "^doc", group = "<!-- 3 -->üìö Documentation" },
    { message = "^perf", group = "<!-- 4 -->‚ö° Performance" },
    { message = "^refactor", group = "<!-- 2 -->üöú Refactor" },
    { message = "^style", group = "<!-- 5 -->üé® Styling" },
    { message = "^test", group = "<!-- 6 -->üß™ Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore|^ci", group = "<!-- 7 -->‚öôÔ∏è Miscellaneous Tasks" },
    { body = ".*security", group = "<!-- 8 -->üõ°Ô∏è Security" },
    { message = "^revert", group = "<!-- 9 -->‚óÄÔ∏è Revert" },
    { message = ".*", group = "<!-- 10 -->üíº Other" },
]
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# An array of link parsers for extracting external references, and turning them into URLs, using regex.
link_parsers = []
# Include only the tags that belong to the current branch.
use_branch_tags = false
# Order releases topologically instead of chronologically.
topo_order = false
# Order releases topologically instead of chronologically.
topo_order_commits = true
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "oldest"
# Process submodules commits
recurse_submodules = false
